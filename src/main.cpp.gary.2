#include <fstream>
#include <math.h>
#include <uWS/uWS.h>
#include <chrono>
#include <iostream>
#include <thread>
#include <vector>
#include "Eigen-3.3/Eigen/Core"
#include "Eigen-3.3/Eigen/QR"
#include "json.hpp"
#include "spline.h"

#define SPLINE_WAYPOINTS 1
#define PRINT_WAYPOINTS 0


#define CAR_ID 0
#define CAR_X 1
#define CAR_Y 2
#define CAR_VX 3
#define CAR_VY 4
#define CAR_S 5
#define CAR_D 6
using namespace std;

// for convenience
using json = nlohmann::json;

// For converting back and forth between radians and degrees.
constexpr double pi() { return M_PI; }
double deg2rad(double x) { return x * pi() / 180; }
double rad2deg(double x) { return x * 180 / pi(); }

// Checks if the SocketIO event has JSON data.
// If there is data the JSON object in string format will be returned,
// else the empty string "" will be returned.
string hasData(string s) {
  auto found_null = s.find("null");
  auto b1 = s.find_first_of("[");
  auto b2 = s.find_first_of("}");
  if (found_null != string::npos) {
    return "";
  } else if (b1 != string::npos && b2 != string::npos) {
    return s.substr(b1, b2 - b1 + 2);
  }
  return "";
}

double distance(double x1, double y1, double x2, double y2)
{
	return sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));
}
int ClosestWaypoint(double x, double y, const vector<double> &maps_x, const vector<double> &maps_y)
{

	double closestLen = 100000; //large number
	int closestWaypoint = 0;

	for(int i = 0; i < maps_x.size(); i++)
	{
		double map_x = maps_x[i];
		double map_y = maps_y[i];
		double dist = distance(x,y,map_x,map_y);
		if(dist < closestLen)
		{
			closestLen = dist;
			closestWaypoint = i;
		}

	}

	return closestWaypoint;

}

int NextWaypoint(double x, double y, double theta, const vector<double> &maps_x, const vector<double> &maps_y)
{

	int closestWaypoint = ClosestWaypoint(x,y,maps_x,maps_y);

	double map_x = maps_x[closestWaypoint];
	double map_y = maps_y[closestWaypoint];

	double heading = atan2((map_y-y),(map_x-x));

	double angle = fabs(theta-heading);
  angle = min(2*pi() - angle, angle);

  if(angle > pi()/4)
  {
    closestWaypoint++;
  if (closestWaypoint == maps_x.size())
  {
    closestWaypoint = 0;
  }
  }

  return closestWaypoint;
}

// Transform from Cartesian x,y coordinates to Frenet s,d coordinates
vector<double> getFrenet(double x, double y, double theta, const vector<double> &maps_x, const vector<double> &maps_y)
{
	int next_wp = NextWaypoint(x,y, theta, maps_x,maps_y);

	int prev_wp;
	prev_wp = next_wp-1;
	if(next_wp == 0)
	{
		prev_wp  = maps_x.size()-1;
	}

	double n_x = maps_x[next_wp]-maps_x[prev_wp];
	double n_y = maps_y[next_wp]-maps_y[prev_wp];
	double x_x = x - maps_x[prev_wp];
	double x_y = y - maps_y[prev_wp];

	// find the projection of x onto n
	double proj_norm = (x_x*n_x+x_y*n_y)/(n_x*n_x+n_y*n_y);
	double proj_x = proj_norm*n_x;
	double proj_y = proj_norm*n_y;

	double frenet_d = distance(x_x,x_y,proj_x,proj_y);

	//see if d value is positive or negative by comparing it to a center point

	double center_x = 1000-maps_x[prev_wp];
	double center_y = 2000-maps_y[prev_wp];
	double centerToPos = distance(center_x,center_y,x_x,x_y);
	double centerToRef = distance(center_x,center_y,proj_x,proj_y);

	if(centerToPos <= centerToRef)
	{
		frenet_d *= -1;
	}

	// calculate s value
	double frenet_s = 0;
	for(int i = 0; i < prev_wp; i++)
	{
		frenet_s += distance(maps_x[i],maps_y[i],maps_x[i+1],maps_y[i+1]);
	}

	frenet_s += distance(0,0,proj_x,proj_y);

	return {frenet_s,frenet_d};

}

// Transform from Frenet s,d coordinates to Cartesian x,y
vector<double> getXY(double s, double d, const vector<double> &maps_s, const vector<double> &maps_x, const vector<double> &maps_y)
{
	int prev_wp = -1;

	while(s > maps_s[prev_wp+1] && (prev_wp < (int)(maps_s.size()-1) ))
	{
		prev_wp++;
	}

	int wp2 = (prev_wp+1)%maps_x.size();

	double heading = atan2((maps_y[wp2]-maps_y[prev_wp]),(maps_x[wp2]-maps_x[prev_wp]));
	// the x,y,s along the segment
	double seg_s = (s-maps_s[prev_wp]);

	double seg_x = maps_x[prev_wp]+seg_s*cos(heading);
	double seg_y = maps_y[prev_wp]+seg_s*sin(heading);

	double perp_heading = heading-pi()/2;

	double x = seg_x + d*cos(perp_heading);
	double y = seg_y + d*sin(perp_heading);

	return {x,y};

}


/***
 * Keep track of path planner iteration
 */

int iteration= 0;

/***
 * High level descriptor
 * for lane.  Start in lane 1
 */
int lane = 1;

/***
 * Target velocity
 */
double ref_vel = 0; //49.5;



int main() {
  uWS::Hub h;

  // Load up map values for waypoint's x,y,s and d normalized normal vectors
  vector<double> map_waypoints_x;
  vector<double> map_waypoints_y;
  vector<double> map_waypoints_s;
  vector<double> map_waypoints_dx;
  vector<double> map_waypoints_dy;

  // Waypoint map to read from
  string map_file_ = "../data/highway_map.csv";
  // The max s value before wrapping around the track back to 0
  double max_s = 6945.554;

  ifstream in_map_(map_file_.c_str(), ifstream::in);

  string line;
  while (getline(in_map_, line)) {
  	istringstream iss(line);
  	double x;
  	double y;
  	float s;
  	float d_x;
  	float d_y;
  	iss >> x;
  	iss >> y;
  	iss >> s;
  	iss >> d_x;
  	iss >> d_y;
  	map_waypoints_x.push_back(x);
  	map_waypoints_y.push_back(y);
  	map_waypoints_s.push_back(s);
  	map_waypoints_dx.push_back(d_x);
  	map_waypoints_dy.push_back(d_y);
  }

#if 0
    /***
     * High level descriptor
     * for lane.  Start in lane 1
     */
    int lane = 1;

    /***
     * Target velocity
     */
    double ref_vel = 0; //49.5;
#endif

  
  h.onMessage([&map_waypoints_x,&map_waypoints_y,&map_waypoints_s,&map_waypoints_dx,&map_waypoints_dy](uWS::WebSocket<uWS::SERVER> ws, char *data, size_t length,
                     uWS::OpCode opCode) {
    iteration++;
    cout << "****  iteration " << iteration << "  ***********" << std::endl;




    // "42" at the start of the message means there's a websocket message event.
    // The 4 signifies a websocket message
    // The 2 signifies a websocket event
    //auto sdata = string(data).substr(0, length);
    //cout << sdata << endl;
    if (length && length > 2 && data[0] == '4' && data[1] == '2') {

      auto s = hasData(data);

      if (s != "") {
        auto j = json::parse(s);
        string event = j[0].get<string>();
        
        if (event == "telemetry") {
          // j[1] is the data JSON object
          
        	// Main car's localization Data
          	double car_x = j[1]["x"];
          	double car_y = j[1]["y"];
          	double car_s = j[1]["s"];
          	double car_d = j[1]["d"];
          	double car_yaw = j[1]["yaw"];
          	double car_speed = j[1]["speed"];

                cout << "=====> car_speed= " << car_speed << std::endl;
		cout << "car_x = " << car_x << std::endl;
		cout << "car_y = " << car_y << std::endl;



          	// Previous path data given to the Planner
          	auto previous_path_x = j[1]["previous_path_x"];
          	auto previous_path_y = j[1]["previous_path_y"];
          	// Previous path's end s and d values 
          	double end_path_s = j[1]["end_path_s"];
          	double end_path_d = j[1]["end_path_d"];

          	// Sensor Fusion Data, a list of all other cars on the same side of the road.
          	auto sensor_fusion = j[1]["sensor_fusion"];

		int prev_size = previous_path_x.size();

          	json msgJson;


		 /***
		  * If we have any points, set the
		  * car's Frenet longitudinal position
		  * to the last path's logitudinal position
		  */
                 if (prev_size > 0) {
		   car_s= end_path_s;
		 }

		 bool too_close= false;


		 /***
		  * Where are the other cars?
		  * How are they behaving?
		  * What should we do as a result?
		  */


                 /****
		  * Find the appropropriate reference velocity to employ
		  * based on the speed of the car in your lane
		  */

                  cout << "sensor_fusion.size() = " << sensor_fusion.size() << std::endl;

		  for (int i= 0; i < sensor_fusion.size(); i++) {
		   /***
		    * check if car is in my lane.
		    * ==> 2 + 4*lane is my lane
		    * ==> the +2 is lane on right
		    * ==> the -2 is lane on left
		    *
		    * the d-value tells us the lane
		    *
		    * Note: sensor_fusion[i] is i-th car.
		    *       sensor_fusion[i][j] is j-th parameter for i-th car
		    */

		    float d= sensor_fusion[i][CAR_D];


		    //we check a range because a car could be partially
		    //in your lane

		    if (d < (2 + 4*lane + 2) && d > (2 + 4*lane -2)) {
		      //if in your lane, compute the magnitude
		      //of it's velocity

		      double vx = sensor_fusion[i][CAR_VX];
		      double vy = sensor_fusion[i][CAR_VY];
		      double check_speed = sqrt(vx*vx + vy*vy);

		      //Check its position to see how close
		      //and use speed to project it's position, s,
		      //in the future. This is done because we use
		      //previous path, get a snapshot of what's
		      //happening now and need to know how other
		      //cars will look in the future.

		      double check_car_s = sensor_fusion[i][CAR_S];

		      check_car_s+= ((double) prev_size* 0.02 * check_speed);


		      //check s values greater than mine (car in front) and s gap
		      //between us less than threshold

                      cout << "check_car_s= " << check_car_s << std::endl;
                      cout << "car_s= " << car_s << std::endl;

		      if ((check_car_s > car_s) && ((check_car_s - car_s) < 30)) {
		        //do logic here, lower ref velocity so we don't crash
			//into car in front of us
			//could also flag to try to change lanes
			//ref_vel= 29.5; //mph

		        too_close= true;
		       
		        if (lane > 0) {
			  lane= 0;
			}

		      }

		    }

		  }


		  /***
		   * the 0.224 achieves 5 m/s accel
		   */
                  if(too_close) {
		    ref_vel -= 0.224;
		  } else if (ref_vel < 49.5) {
		    ref_vel += 0.224;
		  }

#if SPLINE_WAYPOINTS

          	// TODO: define a path made up of (x,y) points that the car will visit sequentially every .02 seconds

		
		/***
		 * Create list of widely spaced (x,y) waypoints spaced evenly at 30 meters.
		 * These will be interpolated with a spline and filled in with more points
		 * (i.e. sampled) for smooth trajectories.
		 */

		vector<double> ptsx;
		vector<double> ptsy;

		/***
		 * Reference x,y, and yaw states for vehicle
		 * Either we will reference the starting point as position for car or use the
		 * previous path's endpoint.
		 */

		double ref_x= car_x;
		double ref_y= car_y;
		double ref_yaw= deg2rad(car_yaw);


		/***
		 * Check if previous path's size is close to empty.  If
		 * so then use the car position as starting reference.
		 */

		cout << "prev_size = " << prev_size << std::endl;
                cout << "car_yaw = " << car_yaw << std::endl;
                cout << "car_s = " << car_s << std::endl;
                cout << "car_x = " << car_x << std::endl;
		cout << "car_y = " << car_y << std::endl;
 

		if (prev_size < 2) {

		 /***
                  *  path is tangent to car's angle by going back
		  *  based on the angle.  This results in two points
		  *  (the original and 1 step back) to make sure 
		  *  the path is tangent.
		  */

		  double prev_car_x= car_x - cos(car_yaw);
		  double prev_car_y= car_y - sin(car_yaw);

		  ptsx.push_back(prev_car_x);
		  ptsx.push_back(car_x);

		  ptsy.push_back(prev_car_y);
		  ptsy.push_back(car_y);
 
		  cout << "(prev_car_x, prev_car_y)= " << "(" << prev_car_x << ", " << prev_car_y << ")" << std::endl;
		  cout << "(car_x, car_y)= " << "(" << car_x << ", " << car_y << ")" << std::endl;

		} else {
		  /***
		   * use previous path's last point as reference
		   */
		  ref_x= previous_path_x[prev_size-1];
		  ref_y= previous_path_y[prev_size-1];

		  double ref_x_prev= previous_path_x[prev_size-2];
		  double ref_y_prev= previous_path_y[prev_size-2];

		  //the angle is just the archtan of the line's slope (rise/run)
		  ref_yaw = atan2(ref_y - ref_y_prev, ref_x - ref_x_prev);

		  //now use them to make tangent

		  ptsx.push_back(ref_x_prev);
		  ptsx.push_back(ref_x);

		  ptsy.push_back(ref_y_prev);
		  ptsy.push_back(ref_y);
		}

		/***
		 * In Frenet coords add evenly spaced points over 30 meter span ahead of
		 * the starting reference
		 *
		 * Note:  when a lange change is issued, the spline near by (prev points) will be
		 *        in the old lane, but the projection forward in Frenet coords
		 *        along s 60-meters and 90-meters out will be in the new lane.
		 */
                
                int laneVal = 2 + 4 * lane;


		vector<double> next_wp0 = getXY(car_s + 30, 2+ 4*lane, map_waypoints_s,
		                                        map_waypoints_x, map_waypoints_y); 

		vector<double> next_wp1 = getXY(car_s + 60, 2 + 4*lane, map_waypoints_s,
		                                        map_waypoints_x, map_waypoints_y); 

		vector<double> next_wp2 = getXY(car_s + 90, 2 + 4*lane,  map_waypoints_s,
		                                        map_waypoints_x, map_waypoints_y);

		ptsx.push_back(next_wp0[0]);
		ptsx.push_back(next_wp1[0]);
		ptsx.push_back(next_wp2[0]);

		ptsy.push_back(next_wp0[1]);
                ptsy.push_back(next_wp1[1]);
		ptsy.push_back(next_wp2[1]);


		for (int i= 0; i < ptsx.size(); i++) {
		  //shift car reference angle to 0 degrees

		  double shift_x= ptsx[i] - ref_x;
		  double shift_y= ptsy[i] - ref_y;

		  ptsx[i] = (shift_x *cos(0-ref_yaw) - shift_y*sin(0-ref_yaw));
		  ptsy[i] = (shift_x *sin(0-ref_yaw) + shift_y*cos(0-ref_yaw));
		}


                int NUMVALS= ptsx.size();

                cout << "ptsx/ptsy= " << std::endl;

                for (int i= 0; i < NUMVALS; i++) {
                  cout << "(" << ptsx[i] << "," << ptsy[i] << ")" << std::endl;
                }



		/***
		 */

		tk::spline s;


		//input (x,y) points to the spline

		s.set_points(ptsx,ptsy);

		//define the (x,y) points used for the planner

		vector<double> next_x_vals;
		vector<double> next_y_vals;

	        /***
		 * start out with path points from last time
		 */
		for (int i= 0; i < previous_path_x.size(); i++) {
		  next_x_vals.push_back(previous_path_x[i]);
		  next_y_vals.push_back(previous_path_y[i]);
		}

		/***
		 * calculate the samples along the spline so that we travel
		 * at desired reference velocity 
		 *
		 * For a target range ahead of 30, we calculate with the
		 * spline function what is the y-value corresponding to the
		 * target x value.  We then calulate the target distance using
		 * Pythagorean theorem.
		 */

		double target_x = 30.0;  
		double target_y = s(target_x);
		double target_dist = sqrt((target_x)*(target_x) + (target_y)*(target_y));

		double x_add_on= 0;  //this is zero b/c we did transformation to car's
		                     //local coordinates and therefore start at origin

		
		/***
		 * Fill in the remaining points 
		 */

                cout << "50- previous_path_x.size() = " << 50-previous_path_x.size() << std::endl;

		for (int i= 1; i <= 50-previous_path_x.size(); i++) {

		  double N= (target_dist/(0.02 * ref_vel/2.24));  //the 2.24 is convert from m/s to mi/hr
 
                  //cout << "N= " << N << std::endl;
                  //cout << "ref_vel= " << ref_vel << std::endl;

		  double x_point= x_add_on + (target_x)/N;
		  double y_point= s(x_point);

		  x_add_on= x_point;

		  double x_ref= x_point;
		  double y_ref= y_point;

		  /***
		   * Rotate back to normal after rotating it earlier
		   * this undoes the previous rotation to bring it back
		   * to global coordinate frame.
		   */

		   x_point= (x_ref *cos(ref_yaw) - y_ref*sin(ref_yaw));
		   y_point= (x_ref *sin(ref_yaw) + y_ref*cos(ref_yaw));

		   x_point += ref_x;
		   y_point += ref_y;

		   next_x_vals.push_back(x_point);
		   next_y_vals.push_back(y_point);
		}
#else 

                //define the (x,y) points used for the planner

                vector<double> next_x_vals;
                vector<double> next_y_vals;


		/***
		 * Note: we are in the middle lane, 1.5 lanes from waypoints (center of road)
		 *       and each lane is 4 meters wide.  The lateral distance is 1.5 * 4= 6
		 *       for center lane driving. Remember this is Frenet coordinates.
		 */
		double dist_inc = 0.3; //originally 0.5
    		for(int i = 0; i < 50; i++)
    		{
		  double next_s = car_s + ((i+1) * dist_inc);
		  double next_d = (1.5 * 4);
		  vector<double> xy = getXY(next_s, next_d, map_waypoints_s, map_waypoints_x, map_waypoints_y);
                   

          	  next_x_vals.push_back(xy[0]);
          	  next_y_vals.push_back(xy[1]);
    		}
#endif

#if PRINT_WAYPOINTS
		int NUM_VALS= next_x_vals.size();

		cout << "next_vals= " << std::endl;

		for (int i= 0; i < NUM_VALS; i++) {
		  cout << "(" << next_x_vals[i] << "," << next_y_vals[i] << ")" << std::endl;
		}
#endif

                //cout << "next_x_vals.size() = " << next_x_vals.size() << std::endl;

          	msgJson["next_x"] = next_x_vals;
          	msgJson["next_y"] = next_y_vals;

          	auto msg = "42[\"control\","+ msgJson.dump()+"]";

		//GFH
                //cout << "msg = " << msg << std::endl;

          	//this_thread::sleep_for(chrono::milliseconds(1000));
          	ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
          
        }
      } else {
        // Manual driving
        std::string msg = "42[\"manual\",{}]";
        ws.send(msg.data(), msg.length(), uWS::OpCode::TEXT);
      }
    }
  });

  // We don't need this since we're not using HTTP but if it's removed the
  // program
  // doesn't compile :-(
  h.onHttpRequest([](uWS::HttpResponse *res, uWS::HttpRequest req, char *data,
                     size_t, size_t) {
    const std::string s = "<h1>Hello world!</h1>";
    if (req.getUrl().valueLength == 1) {
      res->end(s.data(), s.length());
    } else {
      // i guess this should be done more gracefully?
      res->end(nullptr, 0);
    }
  });

  h.onConnection([&h](uWS::WebSocket<uWS::SERVER> ws, uWS::HttpRequest req) {
    std::cout << "Connected!!!" << std::endl;
  });

  h.onDisconnection([&h](uWS::WebSocket<uWS::SERVER> ws, int code,
                         char *message, size_t length) {
    ws.close();
    std::cout << "Disconnected" << std::endl;
  });

  int port = 4567;
  if (h.listen(port)) {
    std::cout << "Listening to port " << port << std::endl;
  } else {
    std::cerr << "Failed to listen to port" << std::endl;
    return -1;
  }
  h.run();
}
